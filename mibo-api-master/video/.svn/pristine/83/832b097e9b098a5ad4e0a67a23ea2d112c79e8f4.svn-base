<?php

/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2016/9/30
 * Time: 18:35
 */
class Domain_PSZGame {
    //黑桃 红桃 梅花 方块
    public $suits = array('1', '2', '3', '4');
    public $color = array('黑桃', '红桃', '梅花', '方块');
    public $figures = array('2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A');
    public $cards = array();

    public function __construct() {
        $cards = array();
//        foreach ($this->suits as $suit) {
//            foreach ($this->figures as $figure) {
//                $cards[] = array($suit, $figure, $color);
//            }
//        }

        for ($i = 0; $i < count($this->suits); $i++) {
            for ($j = 0; $j < count($this->figures); $j++) {
                $cards[] = array($this->suits[$i], $this->figures[$j], $this->color[$i] . '-' . $this->figures[$j]);
            }
        }
        $this->cards = $cards;
    }

    public function reqCard() {

        $dealer_card = $this->getCard();
        $pool1_card = $this->getCard();
        $pool2_card = $this->getCard();
        $pool3_card = $this->getCard();
        $rs = array();
        $rs = $this->winRateCheck($dealer_card, $pool1_card, $pool2_card, $pool3_card);


        return $rs;

    }

    public function winRateCheck($dealer_card, $pool1_card, $pool2_card, $pool3_card) {

//        $dealer_pool_rata = 0;
//
//        if($this->compareCards($dealer_card,$pool1_card) < 0) {
//            $dealer_pool_rata += rand(1, 100);
//        }
//
//        if($this->compareCards($dealer_card,$pool2_card) < 0) {
//            $dealer_pool_rata += rand(1, 100);
//        }
//
//        if($this->compareCards($dealer_card,$pool3_card) < 0) {
//            $dealer_pool_rata += rand(1, 100);
//        }
//
//        if ($dealer_pool_rata >= 180) {
//
//            $dealer_card = $this->getCard();
//        }

        $result = array(
            'dealer_card' => $dealer_card,
            'pool1_card'  => $pool1_card,
            'pool2_card'  => $pool2_card,
            'pool3_card'  => $pool3_card,
        );

        return $result;
    }

    public function getCard() {
        //打乱牌序
        shuffle($this->cards);

        //生成3张牌
        return array(array_pop($this->cards), array_pop($this->cards), array_pop($this->cards));
    }

    public function getPoolRate($uid, $loop_info) {
        if (empty($loop_info)) {
            throw new PhalApi_Exception("牌值异常数据", 556);
        }

        $dealer_card = json_decode($loop_info['dealer_card'], true);
        $pool1_card = json_decode($loop_info['pool1_card'], true);
        $pool2_card = json_decode($loop_info['pool2_card'], true);
        $pool3_card = json_decode($loop_info['pool3_card'], true);

        $rate_1 = $rate_2 = $rate_3 = 0;
        $dealer_score = $this->ownScore($dealer_card);
        $pool1_score = $this->ownScore($pool1_card);
        $pool2_score = $this->ownScore($pool2_card);
        $pool3_score = $this->ownScore($pool3_card);

        if ($uid == $loop_info['dealer_id']) { //庄家
            if ($this->compareCards($dealer_card, $pool1_card) > 0) {
                $rate_1 = $this->formatRate($dealer_score);
            } else {
                $rate_1 = $this->formatRate($pool1_score) * (-1);
            }
            if ($this->compareCards($dealer_card, $pool2_card) > 0) {
                $rate_2 = $this->formatRate($dealer_score);
            } else {
                $rate_2 = $this->formatRate($pool2_score) * (-1);
            }
            if ($this->compareCards($dealer_card, $pool3_card) > 0) {
                $rate_3 = $this->formatRate($dealer_score);
            } else {
                $rate_3 = $this->formatRate($pool3_score) * (-1);
            }
        } else { //普通用户
            if ($this->compareCards($pool1_card, $dealer_card) > 0) {
                $rate_1 = $this->formatRate($pool1_score);
            } else {
                $rate_1 = $this->formatRate($dealer_score) * (-1);
            }
            if ($this->compareCards($pool2_card, $dealer_card) > 0) {
                $rate_2 = $this->formatRate($pool2_score);
            } else {
                $rate_2 = $this->formatRate($dealer_score) * (-1);
            }
            if ($this->compareCards($pool3_card, $dealer_card) > 0) {
                $rate_3 = $this->formatRate($pool3_score);
            } else {
                $rate_3 = $this->formatRate($dealer_score) * (-1);
            }
        }

        return array($rate_1, $rate_2, $rate_3);
    }

    private function formatRate($score) {
        $rate = 0.0;
        if ($score > 60 * 100000) { //豹子
            $rate = 5.0;
        } else if ($score > (30 * 100000 + 20 * 100000)) { //同花顺
            $rate = 3.0;
        } else if ($score > 30 * 100000) { //同花
            $rate = 2.0;
        } else if ($score > 20 * 100000) { //顺子
            $rate = 1.5;
        } else {
            $rate = 1.0;
        }
        return $rate;
    }


    public function compareCards($card1, $card2) {
        $score1 = $this->ownScore($card1);
        $score2 = $this->ownScore($card2);
        if ($score1 > $score2) {
            return 1;
        } elseif ($score1 < $score2) {
            return -1;
        }
        return 0;
    }


    private function ownScore($card) {
        $suit = $figure = array();
        foreach ($card as $v) {
            $suit[] = $v[0];
            $figure[] = array_search($v[1], $this->figures) + 2;
        }
        //牌值前补齐0
        for ($i = 0; $i < 3; $i++) {
            $figure[$i] = str_pad($figure[$i], 2, '0', STR_PAD_LEFT);
        }

        //根据牌值进行降序排列
        rsort($figure);

        //对于第一张和第二张是对子做特殊处理，保证是对子排在后面
        if ($figure[1] == $figure[2]) {
            $temp = $figure[0];
            $figure[0] = $figure[2];
            $figure[2] = $temp;
        }
        //单牌算分
        $score = intval($figure[0] . $figure[1] . $figure[2]);

        //豹子算分 60*100000  x5.0倍
        if ($figure[0] == $figure[1] && $figure[0] == $figure[2]) {
            $score += 60 * 100000;
        }

        //同花算分 30*100000 x2.0倍
        if ($suit[0] == $suit[1] && $suit[0] == $suit[2]) {
            $score += 30 * 100000;
        }

        //顺子算分 20*100000 x1.5倍
        if ($figure[0] == $figure[1] + 1 && $figure[1] == $figure[2] + 1 || implode($figure) == '140302') {
            $score += 20 * 100000;
        }
        //对子算分 10*100000
        if ($figure[0] == $figure[1] && $figure[1] != $figure[2]) {
            $score += 10 * 100000;
        }
        return $score;
    }


}