<?php
class Domain_DNGame {


    private $Pork = array(1,2,3,4,5,6,7,8,9,10,11,12,13,1,2,3,4,5,6,7,8,9,10,11,12,13,1,2,3,4,5,6,7,8,9,10,11,12,13,1,2,3,4,5,6,7,8,9,10,11,12,13);//构建扑克牌。
    private $a,$i,$j,$cow,$temp,$Cardall=0;//Cardall计算5张牌总值，cow计算牛几。
    private $n=0;//存储10、J、Q、K张数。
    private $Random = null;
    private $Card = null;

    public $suits = array('1', '2', '3', '4');
    public $color = array('黑桃', '红桃', '梅花', '方块');
    public $figures = array('A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K');
    public $cards = array();

    public function __construct() {
        $cards = array();

        for ($i = 0; $i < count($this->suits); $i++) {
            for ($j = 0; $j < count($this->figures); $j++) {
                $cards[] = array($this->suits[$i], $this->figures[$j], $this->color[$i] . '-' . $this->figures[$j]);
            }
        }

        $this->cards = $cards;
    }


    public function getPork() {

        return $this->getCard();

    }

    public function getCard() {
        //打乱牌序
        shuffle($this->cards);

        //生成3张牌
        return array(array_pop($this->cards), array_pop($this->cards), array_pop($this->cards),array_pop($this->cards),array_pop($this->cards));
    }

    public function countNiu($pork = array()) {
        $niu_num = 0;
        $cards = array();
        foreach ($pork as $card) {
            if($card[1] == '10' || $card[1] == 'J'||$card[1] == 'K'||$card[1] == 'Q') {
                $niu_num ++;

                $cards[] = 10;
            } else {
                $cards[] = intval($card[1]);
            }

        }
        var_dump($cards);
        $rs = $this->niu($cards);

        var_dump($rs);


    }

    public function compareCard($card1, $card2) {

        $niu1 = $this->niu($card1);
        $niu2 = $this->niu($card2);
        $ret = 0;
        if($niu1>$niu2) {
            $ret= 1;
        } else if($niu1==$niu2) {
            $card1_score = 0;
            $card1_score_suit = 0;
            $card2_score = 0;
            $card2_score_suit = 0;
            foreach ($card1 as $card) {
                $card1_score += intval(array_search($card[1], $this->figures));
                $card1_score_suit += (4-$this->suits[0]);
            }
            foreach ($card2 as $card) {
                $card2_score += intval(array_search($card[1], $this->figures));
                $card2_score_suit += (4-$this->suits[0]);
            }
            if($card1_score>card2_score) {
                $ret = 1;
            } else if($card1_score=card2_score) {
                if($card1_score_suit>=$card2_score_suit) {
                    $ret = 1;
                } else {
                    $ret = -1;
                }
            } else {
                $ret = -1;
            }
        } else {
            $ret= -1;
        }
        return $ret;
    }





    /**
     * 斗牛计算算法
     * @param array $cards =array(1,2,7,8,0);
     * @return int 0没有牛,10牛牛
     */
    public function niu($pork = array()) {
        $cards = array();
        foreach ($pork as $pk) {
            if ($pk[1] == '10' || $pk[1] == 'J' || $pk[1] == 'K' || $pk[1] == 'Q') {
                $cards[] = 10;
            } else if($pk[1] == 'A') {
                $cards[] = 1;
            } else {
                $cards[] = intval($pk[1]);
            }
        }

        //所有有牛的组合
        $nius = array(
            array(1, 1, 8),
            array(1, 2, 7),
            array(1, 3, 6),
            array(1, 4, 5),
            array(2, 3, 5),
            array(2, 2, 6),
            array(2, 4, 4),
            array(3, 3, 4),
            array(10, 9, 1),
            array(10, 8, 2),
            array(10, 7, 3),
            array(10, 6, 4),
            array(10, 5, 5),
            array(9, 8, 3),
            array(9, 7, 4),
            array(9, 6, 5),
            array(8, 7, 5),
            array(8, 8, 4),
            array(8, 6, 6),
            array(7, 7, 6),
            array(10, 10, 10));

        $flag = false;//默认没有牛
        $bakcards = $cards;
        foreach ($nius as $key => $niu) {
            $fnum = 0;
            foreach ($niu as $k => $v) {
                if (in_array($v, $cards)) {
                    $fnum++; //
                    array_splice($cards, array_search($v, $cards), 1); //删除已查到的位置值
                }
            }
            if ($fnum > 2) {    //3个都对上了，说明有牛
                $flag = true;
                break;
            } else { //没牛，重新赋值
                $cards = $bakcards;
            }

        }
        if ($flag) {//返回牛几
            $niunum = intval($cards[0] + $cards[1]) % 10;
            return $niunum === 0 ? 10 : $niunum;
        } else {
            return 0;
        }
    }






}