<?php
/*
 * +----------------------------------------------------------------------
 * | 支付异步/同步回调
 * +----------------------------------------------------------------------
 * | Copyright (c) 2015 summer All rights reserved.
 * +----------------------------------------------------------------------
 * | Author: summer <aer_c@qq.com> <qq7579476>
 * +----------------------------------------------------------------------
 * | This is not a free software, unauthorized no use and dissemination.
 * +----------------------------------------------------------------------
 * | Date
 * +----------------------------------------------------------------------
 */

class Api_PayNotify extends PhalApi_Api {

	public function getRules() {
        return array(
            'index' => array(
                'type' 	=> array('name' => 'type', 'type' =>'string', 'require' => true, 'desc' => '支付类型，比如alipay,wechat'),
                'method'    => array('name' => 'method', 'type' =>'string', 'desc' => '回调类型，notify异步/return同步'),
            ),
        );
	}
	
    /**
     * 支付异步/同步回调
     * @return string 无 根据不同的引擎，返回不同的信息，如果错误信息，则存入日志
     */
	public function index() {
        DI()->pay = new Notify_Lite();
        if($this->type == 'wechat') {
            $notify_url = 'https://mibo.yahalei.com/mibo/callback/wechat_pay_notify.php';
            $wechat_config = DI()->config->get('app.wechat_pay');
            $config['appid'] = $wechat_config['appid'];
            $config['mchid'] = $wechat_config['mch_id'];
            $config['key'] = $wechat_config['api_key'];
            $pay_type = 1;
        } elseif($this->type == 'alipay') {
            $notify_url = 'https://mibo.yahalei.com/mibo/callback/alipay_notify.php';
            $alipay_config = DI()->config->get('app.alipay');

            $config['partner'] = $alipay_config['partner_id'];
            $config['key'] = $alipay_config['rsa_private'];
            $config['email'] = $alipay_config['seller_id'];
            $pay_type = 2;
        } else {
            throw new PhalApi_Exception('请求参数错误', 500);
        }

        //获取对应的支付引擎
        DI()->pay->set($this->type, $notify_url, $config);

        //获取回调信息
        $notify = $GLOBALS['PAY_NOTIFY'];
        if(!$notify) {
            DI()->logger->log('payError','Not data commit', array('Type' => $this->type));
            exit; //直接结束程序，不抛出错误
        }

        //验证
        if(DI()->pay->verifyNotify($notify) == true){
            //获取订单信息
            $info = DI()->pay->getInfo();
            $unique = array('order_no' => $info['out_trade_no']);
            $insert_data = array('type' => $pay_type, 'money' => $info['money'], 'is_notify' => 1);
            $update_data = array('is_notify' => 1);
            $res = DI()->notorm->recharge_log->insert_update($unique, $insert_data, $update_data);

            //订单更新成功
            if($res){
                if ($this->method == "return") {
                    //TODO 同步回调需要跳转的页面
                } else {
                    DI()->mail = new PHPMailer_Lite();
                    $add_arr = array('cheng@dianhengad.com', '362226577@qq.com', '313256513@qq.com');
                    if($pay_type == 1) {
                        DI()->mail->send($add_arr, '微信新订单，收入'.$info['money'].'元');
                    }
                    if($pay_type == 2) {
                        DI()->mail->send($add_arr, '支付宝新订单，收入'.$info['money'].'元');
                    }
                    DI()->logger->log('paySuccess', 'Pay Success',array('Type' => $this->type, 'Method' => $this->method, 'Data'=> $info));

                    //移除超全局变量
                    unset($GLOBALS['PAY_NOTIFY']);
                    //支付接口需要返回的信息，通知接口我们已经接收到了支付成功的状态
                    DI()->pay->notifySuccess();

                    exit; //需要结束程序
                }
            }else{
                DI()->pay->notifySuccess();
                DI()->logger->log('payError',' mysql fail to update status of order', $info);
                exit;
            }
        }else{
            DI()->pay->notifyError();
            DI()->logger->log('payError','Verify error', array('Type' => $this->type, 'Method'=> $this->method, 'Data' => $notify));
            exit;
        }
	}
}









