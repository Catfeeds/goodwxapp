<?php
/*
 * +----------------------------------------------------------------------
 * | 支付异步/同步回调
 * +----------------------------------------------------------------------
 * | Copyright (c) 2015 summer All rights reserved.
 * +----------------------------------------------------------------------
 * | Author: summer <aer_c@qq.com> <qq7579476>
 * +----------------------------------------------------------------------
 * | This is not a free software, unauthorized no use and dissemination.
 * +----------------------------------------------------------------------
 * | Date
 * +----------------------------------------------------------------------
 */

class Api_PayNotify extends PhalApi_Api {

	public function getRules() {
        return array(
            'index' => array(
                'type' 	=> array('name' => 'type', 'type' =>'string', 'require' => true, 'desc' => '支付类型，比如alipay,wechat'),
                'method'    => array('name' => 'method', 'type' =>'string', 'desc' => '回调类型，notify异步/return同步'),
            ),
        );
	}
	
    /**
     * 支付异步/同步回调
     * @return string 无 根据不同的引擎，返回不同的信息，如果错误信息，则存入日志
     */
	public function index() {
        DI()->pay = new Notify_Lite();

        //一、组装第三方支付配置信息
        if($this->type == 'wechat') {
            $notify_url = 'https://mibo.yahalei.com/mibo/callback/wechat_pay_notify.php';
            $wechat_config = DI()->config->get('app.wechat_pay');
            $config['appid'] = $wechat_config['appid'];
            $config['mchid'] = $wechat_config['mch_id'];
            $config['key'] = $wechat_config['api_key'];
            $pay_type = 1;

        } elseif($this->type == 'alipay') {
            $notify_url = 'https://mibo.yahalei.com/mibo/callback/alipay_notify.php';
            $alipay_config = DI()->config->get('app.alipay');

            $config['partner'] = $alipay_config['partner_id'];
            $config['key'] = $alipay_config['rsa_private'];
            $config['email'] = $alipay_config['seller_id'];
            $pay_type = 2;

        } else {
            throw new PhalApi_Exception('请求参数错误', 500);
        }

        //二、获取对应的支付引擎
        DI()->pay->set($this->type, $notify_url, $config);

        //三、获取第三方回调信息
        $notify = $GLOBALS['PAY_NOTIFY'];
        if(!$notify) {
            DI()->logger->log('payError','Not data commit', array('Type' => $this->type));
            exit; //直接结束程序，不抛出错误
        }

        //四验证
        if(DI()->pay->verifyNotify($notify) == true){
            //四、1、获取订单信息
            $info = DI()->pay->getInfo();
            $unique = array('order_no' => $info['out_trade_no']);
            $insert_data = array('type' => $pay_type, 'money' => $info['money'], 'is_notify' => 1);
            $update_data = array('is_notify' => 1);

            //四、2、如果存在订单就更新，不存在就更新
            $update_order_rs = DI()->notorm->recharge_log->insert_update($unique, $insert_data, $update_data);
            DI()->logger->debug('测试vip充值一', $update_order_rs);
            //四、3、查看是否有订单没更新钻石的，如果有则重新再重新发放一次
            $pre_info = DI()->notorm->recharge_log->where('order_no = ?', $info['out_trade_no'])->fetchOne();

            //四、4、更新用户vip等级
            if($update_order_rs) {
                $recharge_amount = DI()->redis->get_time('recharge_amount_user_id_'.$pre_info['user_id']);
                if(!$recharge_amount) {
                    $recharge_amount = DI()->r_notorm->recharge_log->where('user_id',$pre_info['user_id'])->where('is_notify = 1')
                        ->sum('money');
                    $recharge_amount = $recharge_amount ? $recharge_amount : 0;
                } else {
                    $recharge_amount = $recharge_amount + $pre_info['money'];
                }

                $recharge_amount = $recharge_amount / 100;

                DI()->logger->debug('测试vip充值',$recharge_amount);

                $vip_level = 0;
                switch($recharge_amount) {
                    case $recharge_amount >= 30 && $recharge_amount < 200:
                        $vip_level = 1;
                        break;
                    case $recharge_amount >= 200 && $recharge_amount < 500:
                        $vip_level = 2;
                        break;
                    case $recharge_amount >= 500 && $recharge_amount < 1000:
                        $vip_level = 3;
                        break;
                    case $recharge_amount >= 1000 && $recharge_amount < 2000:
                        $vip_level = 4;
                        break;
                    case $recharge_amount >= 2000 && $recharge_amount < 5000:
                        $vip_level = 5;
                        break;
                    case $recharge_amount >= 5000 && $recharge_amount < 10000:
                        $vip_level = 6;
                        break;
                    case $recharge_amount >= 10000 && $recharge_amount < 20000:
                        $vip_level = 7;
                        break;
                    case $recharge_amount >= 20000 && $recharge_amount < 50000:
                        $vip_level = 8;
                        break;
                    case $recharge_amount >= 50000 && $recharge_amount < 100000:
                        $vip_level = 9;
                        break;
                    case $recharge_amount >= 100000 && $recharge_amount < 200000:
                        $vip_level = 10;
                        break;
                    case $recharge_amount >= 200000 && $recharge_amount < 500000:
                        $vip_level = 11;
                        break;
                    case $recharge_amount >= 500000:
                        $vip_level = 12;
                        break;
                }

                DI()->notorm->user->where('id', $pre_info['user_id'])->update(array('vip_level' => $vip_level));
                DI()->redis->set_time('recharge_amount_user_id_'.$pre_info['user_id'], $recharge_amount, 3600 * 72);
            }

            if($pre_info['is_update_diamond'] != 1) {
                $model = new Model_RechargeItem();
                $price_item =  $model->getItemById($pre_info['operation_value']);
                $model_user = new Model_User();
                $re_update_diamond = $model_user->updateUserDiamondCoin($pre_info['user_id'], $price_item['diamond_num'], $price_item['extra_num']);
                if($re_update_diamond) {
                    DI()->logger->log('re_update_diamond', 'Success', '之前更新钻石失败，在接到第三方通知时重新更新');
                }
            }

            //订单更新成功
            if($update_order_rs){
                if ($this->method == "return") {
                    //TODO 同步回调需要跳转的页面
                } else {

                    DI()->logger->log('paySuccess', 'Pay Success',array('Type' => $this->type, 'Method' => $this->method, 'Data'=> $info));

                    //移除超全局变量
                    unset($GLOBALS['PAY_NOTIFY']);
                    //支付接口需要返回的信息，通知接口我们已经接收到了支付成功的状态
                    DI()->pay->notifySuccess();

                    exit; //需要结束程序
                }
            }else{
                DI()->pay->notifySuccess();
                DI()->logger->log('payError',' mysql fail to update status of order', $info);
                exit;
            }
        }else{
            DI()->pay->notifyError();
            DI()->logger->log('payError','Verify error', array('Type' => $this->type, 'Method'=> $this->method, 'Data' => $notify));
            exit;
        }
	}
}









