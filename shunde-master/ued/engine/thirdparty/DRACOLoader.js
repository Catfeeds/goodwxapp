THREE.DRACOLoader=function(a){this.manager=void 0!==a?a:THREE.DefaultLoadingManager;this.materials=null};var dracoDecoder=new DracoModule;
THREE.DRACOLoader.prototype={constructor:THREE.DRACOLoader,setMaterials:function(a){this.materials=a},load:function(a,f,g,c){var d=this,e=new THREE.FileLoader(d.manager);e.setPath(this.path);e.setResponseType("arraybuffer");e.load(a,function(a){f(d.decodeDracoFile(a))},g,c)},setPath:function(a){this.path=a},decodeDracoFile:function(a){var f=new dracoDecoder.DecoderBuffer;f.Init(new Int8Array(a),a.byteLength);a=new dracoDecoder.WebIDLWrapper;var g=a.GetEncodedGeometryType(f);if(g!=dracoDecoder.TRIANGULAR_MESH&&
g!=dracoDecoder.POINT_CLOUD)throw Error("Error: Unknown geometry type.");return this.convertDracoGeometryTo3JS(a,g,f)},convertDracoGeometryTo3JS:function(a,f,g){var c;performance.now();c=f==dracoDecoder.TRIANGULAR_MESH?a.DecodeMeshFromBuffer(g):a.DecodePointCloudFromBuffer(g);performance.now();dracoDecoder.destroy(g);var d,e,v;g=f==dracoDecoder.TRIANGULAR_MESH?c.num_faces():0;d=c.num_points();e=3*d;v=2*d;c.num_attributes();d=a.GetAttributeId(c,dracoDecoder.POSITION);if(-1==d)throw fileDisplayArea.innerText=
"No position attribute found in the mesh.",dracoDecoder.destroy(a),dracoDecoder.destroy(c),Error("No position attribute found in the mesh.");d=a.GetAttribute(c,d);var q=new dracoDecoder.DracoFloat32Array;a.GetAttributeFloatForAllPoints(c,d,q);var r=a.GetAttributeId(c,dracoDecoder.COLOR),h;-1!=r&&(d=a.GetAttribute(c,r),h=new dracoDecoder.DracoFloat32Array,a.GetAttributeFloatForAllPoints(c,d,h));d=a.GetAttributeId(c,dracoDecoder.NORMAL);var k;if(-1!=d){var m=a.GetAttribute(c,d);k=new dracoDecoder.DracoFloat32Array;
a.GetAttributeFloatForAllPoints(c,m,k)}var m=a.GetAttributeId(c,dracoDecoder.TEX_COORD),l;if(-1!=m){var n=a.GetAttribute(c,m);l=new dracoDecoder.DracoFloat32Array;a.GetAttributeFloatForAllPoints(c,n,l)}for(var n=new Uint32Array(3*g),t=new Float32Array(e),u=new Float32Array(e),w=new Float32Array(v),p=new Float32Array(e),b=0;b<e;b+=3)t[b]=q.GetValue(b),t[b+1]=q.GetValue(b+1),t[b+2]=q.GetValue(b+2),-1!=r?(p[b]=h.GetValue(b),p[b+1]=h.GetValue(b+1),p[b+2]=h.GetValue(b+2)):(p[b]=1,p[b+1]=1,p[b+2]=1),-1!=
d&&(u[b]=k.GetValue(b),u[b+1]=k.GetValue(b+1),u[b+2]=k.GetValue(b+2));if(-1!=m)for(e=0;e<v;e+=2)w[e]=l.GetValue(e),w[e+1]=l.GetValue(e+1);dracoDecoder.destroy(q);-1!=r&&dracoDecoder.destroy(h);-1!=d&&dracoDecoder.destroy(k);-1!=m&&dracoDecoder.destroy(l);if(f==dracoDecoder.TRIANGULAR_MESH){h=new dracoDecoder.DracoInt32Array;for(k=0;k<g;++k)a.GetFaceFromMesh(c,k,h),l=3*k,n[l]=h.GetValue(0),n[l+1]=h.GetValue(1),n[l+2]=h.GetValue(2);dracoDecoder.destroy(h)}dracoDecoder.destroy(a);dracoDecoder.destroy(c);
a=new THREE.BufferGeometry;f==dracoDecoder.TRIANGULAR_MESH&&a.setIndex(new (65535<n.length?THREE.Uint32BufferAttribute:THREE.Uint16BufferAttribute)(n,1));a.addAttribute("position",new THREE.Float32BufferAttribute(t,3));a.addAttribute("color",new THREE.Float32BufferAttribute(p,3));-1!=d&&a.addAttribute("normal",new THREE.Float32BufferAttribute(u,3));-1!=m&&a.addAttribute("uv",new THREE.Float32BufferAttribute(w,2));f=null;if(this.materials&&this.materials.materials)for(var x in this.materials.materials){f=
this.materials.materials[x];break}return new THREE.Mesh(a,f)}};
