module("/libs/vizengine_engine3d.js",function(){var f=com.vizengine.engine3d.Render;f.extend("com.vizengine.engine3d.RenderWebGL",{init:function(a){f.prototype.init.apply(this,arguments);this.canvas=document.createElement("canvas");this.canvas.id="webglcanvas"+this.id;this.canvas.style.width="100%";this.canvas.style.height="100%";this.contextArray=[];this.view=a;this.renderCount=0;a._nativeView.div.appendChild(this.canvas);this.initGL(this.canvas);this.initShaders();var c=this;a.interceptMethod("dispatchLayout",
function(){var a=this._origin.apply(this,arguments);c.canvas.width=this.frame.width*window.devicePixelRatio;c.canvas.height=this.frame.height*window.devicePixelRatio;c.gl.viewportWidth=c.canvas.width;c.gl.viewportHeight=c.canvas.height;return a})},_renderObject3D:function(a,c){this._checkAndSendVertices(a);this._checkAndSendTexture(a);this.gl.uniformMatrix4fv(this.shaderProgram.mvMatrixUniform,!1,new Float32Array(c.elements));this._renderObject3DNode(a);for(var d=0;d<a.children.length;d++){var b=
a.children[d],e=c.clone();e.multiply(b.matrix);this._renderObject3D(b,e)}},_renderObject3DNode:function(a){a=this._getOrCreateWebGLContext(a);if(null!=a.texture){var c=this.gl;c.bindBuffer(c.ARRAY_BUFFER,a.vertexPositionBuffer);c.vertexAttribPointer(this.shaderProgram.vertexPositionAttribute,a.vertexPositionBuffer.itemSize,c.FLOAT,!1,0,0);c.bindBuffer(c.ARRAY_BUFFER,a.vertexTextureCoordBuffer);c.vertexAttribPointer(this.shaderProgram.textureCoordAttribute,a.vertexTextureCoordBuffer.itemSize,c.FLOAT,
!1,0,0);c.activeTexture(c.TEXTURE0);c.bindTexture(c.TEXTURE_2D,a.texture);c.uniform1i(this.shaderProgram.samplerUniform,0);c.bindBuffer(c.ELEMENT_ARRAY_BUFFER,a.vertexIndexBuffer);c.drawElements(c.TRIANGLES,a.vertexIndexBuffer.numItems,c.UNSIGNED_SHORT,0)}},_getOrCreateWebGLContext:function(a){null==a.webglContext&&(a.webglContext={});if(null==a.webglContext[this.id]){var c={};a.webglContext[this.id]=c;this.contextArray.push(c)}a.webglContext[this.id].renderCount=this.renderCount;return a.webglContext[this.id]},
_checkAndSendTexture:function(a){var c=this._getOrCreateWebGLContext(a);if(null==c.texture&&null!=a.texture.image){var d=this.gl,b=d.createTexture();c.texture=b;b.image=a.texture.image;d.bindTexture(d.TEXTURE_2D,b);d.pixelStorei(d.UNPACK_FLIP_Y_WEBGL,!0);d.texImage2D(d.TEXTURE_2D,0,d.RGBA,d.RGBA,d.UNSIGNED_BYTE,b.image);d.texParameteri(d.TEXTURE_2D,d.TEXTURE_MAG_FILTER,d.NEAREST);d.texParameteri(d.TEXTURE_2D,d.TEXTURE_MIN_FILTER,d.NEAREST);d.bindTexture(d.TEXTURE_2D,null)}},_checkAndSendVertices:function(a){var c=
this._getOrCreateWebGLContext(a);if(null==c.vertexPositionBuffer&&!a.geometryBuffer.vertices.isEmpty()){var c=this._getOrCreateWebGLContext(a),d=this.gl,b=d.createBuffer();c.vertexPositionBuffer=b;d.bindBuffer(d.ARRAY_BUFFER,b);var e=a.geometryBuffer.vertices.dataArray;d.bufferData(d.ARRAY_BUFFER,new Float32Array(e),d.STATIC_DRAW);b.itemSize=a.geometryBuffer.vertices.dataUnit;b.numItems=e.length/a.geometryBuffer.vertices.dataUnit;b=d.createBuffer();c.vertexTextureCoordBuffer=b;d.bindBuffer(d.ARRAY_BUFFER,
b);e=a.geometryBuffer.uvs.dataArray;d.bufferData(d.ARRAY_BUFFER,new Float32Array(e),d.STATIC_DRAW);b.itemSize=a.geometryBuffer.uvs.dataUnit;b.numItems=e.length/a.geometryBuffer.uvs.dataUnit;b=d.createBuffer();c.vertexIndexBuffer=b;d.bindBuffer(d.ELEMENT_ARRAY_BUFFER,b);c=a.geometryBuffer.indices.dataArray;d.bufferData(d.ELEMENT_ARRAY_BUFFER,new Uint16Array(c),d.STATIC_DRAW);b.itemSize=a.geometryBuffer.indices.dataUnit;b.numItems=c.length/a.geometryBuffer.indices.dataUnit}},render:function(a,c){var d=
this.shaderProgram,b=this.gl;b.clearColor(0,0,0,1);b.enable(b.DEPTH_TEST);b.viewport(0,0,b.viewportWidth,b.viewportHeight);b.clear(b.COLOR_BUFFER_BIT|b.DEPTH_BUFFER_BIT);b.uniformMatrix4fv(d.pMatrixUniform,!1,new Float32Array(c.projectionMatrix.elements));d=new com.vizengine.math.Matrix4;b=c.getWorldMatrix().getInverse();d.multiply(b);this._renderObject3D(a,d);this.releaseResource();this.renderCount++},releaseResource:function(){for(var a=this.contextArray.length-1;0<=a;a--){var c=this.contextArray[a];
c.renderCount!=this.renderCount&&(this.releaseContext(c),this.contextArray.splice(a,1))}},releaseContext:function(a){null!=a.texture&&(this.gl.deleteTexture(a.texture),a.texture=null);null!=a.vertexPositionBuffer&&(this.gl.deleteBuffer(a.vertexPositionBuffer),a.vertexPositionBuffer=null);null!=a.vertexTextureCoordBuffer&&(this.gl.deleteBuffer(a.vertexTextureCoordBuffer),a.vertexTextureCoordBuffer=null);null!=a.vertexIndexBuffer&&(this.gl.deleteBuffer(a.vertexIndexBuffer),a.vertexIndexBuffer=null)},
initGL:function(a){try{this.gl=a.getContext("experimental-webgl"),this.gl.viewportWidth=a.width,this.gl.viewportHeight=a.height}catch(c){}this.gl||alert("Could not initialise WebGL, sorry :-(")},initShaders:function(){var a=this.gl,c=this.getShader(a,a.FRAGMENT_SHADER),d=this.getShader(a,a.VERTEX_SHADER),b=a.createProgram();this.shaderProgram=b;a.attachShader(b,d);a.attachShader(b,c);a.linkProgram(b);a.getProgramParameter(b,a.LINK_STATUS)||alert("Could not initialise shaders");a.useProgram(b);b.vertexPositionAttribute=
a.getAttribLocation(b,"aVertexPosition");a.enableVertexAttribArray(b.vertexPositionAttribute);b.textureCoordAttribute=a.getAttribLocation(b,"aTextureCoord");a.enableVertexAttribArray(b.textureCoordAttribute);b.pMatrixUniform=a.getUniformLocation(b,"uPMatrix");b.mvMatrixUniform=a.getUniformLocation(b,"uMVMatrix");b.samplerUniform=a.getUniformLocation(b,"uSampler")},getShader:function(a,c){var d=null,b=null;if(c==a.FRAGMENT_SHADER)d="precision mediump float;\nvarying vec2 vTextureCoord;\nuniform sampler2D uSampler;\nvoid main(void) {\ngl_FragColor = texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));\n}",
b=a.createShader(a.FRAGMENT_SHADER);else if(c==a.VERTEX_SHADER)d="attribute vec3 aVertexPosition;\nattribute vec2 aTextureCoord;\nuniform mat4 uMVMatrix;\nuniform mat4 uPMatrix;\nvarying vec2 vTextureCoord;\nvoid main(void) {\ngl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);\nvTextureCoord = aTextureCoord;\n}",b=a.createShader(a.VERTEX_SHADER);else return null;a.shaderSource(b,d);a.compileShader(b);return a.getShaderParameter(b,a.COMPILE_STATUS)?b:(alert(a.getShaderInfoLog(b)),null)}})});
